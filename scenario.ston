LGScenario {	#entries : OrderedCollection [		LGCompositeEntry [			LGShowBrowser {				#hideWindowSelector : #hideBrowser,				#showWindowSelector : #showBrowser,				#windowSelector : #browserWindow			},			LGResizeWindow {				#newExtent : '[ (self scenarist displayExtent x / 2)\r\t@ self scenarist displayExtent y ]',				#windowSelector : #browserWindow			},			LGPositionWindow {				#newPosition : '[ self scenarist displayTopLeftCornerPosition ]',				#windowSelector : #browserWindow			}		],		LGCompositeEntry [			LGCreatePackage {				#packageName : 'FamixNG-Fortran-Generator'			},			LGShowPackage {				#packageName : 'FamixNG-Fortran-Generator'			}		],		LGCompositeEntry [			LGCreateClass {				#superClass : #FamixFileBasedLanguageGenerator,				#package : #FamixNG-Fortran-Generator,				#classVariables : [ ],				#name : #FmxNGFortranGenerator,				#slots : [					#module,					#program,					#subProgram,					#variable,					#body,					#function,					#subRoutine,					#parameter,					#access,					#invocation,					#tWithBody,					#include,					#usage,					#tStaticInvocable,					#tStaticInvocation,					#tWithStaticInvocations				]			},			LGShowClass {				#classToShow : #FmxNGFortranGenerator			}		],		LGCompositeEntry [			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #accessing,				#sourceCode : 'packageName\r\t^ \'FamixNG-Fortran\'',				#isClassSide : true			},			LGShowMethod {				#methodSelectorToShow : #packageName,				#classToShow : #FmxNGFortranGenerator,				#isClassSide : true			}		],		LGCompositeEntry [			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #accessing,				#sourceCode : 'prefix\r\t^ \'FmxFortran\'',				#isClassSide : true			},			LGShowMethod {				#methodSelectorToShow : #prefix,				#classToShow : #FmxNGFortranGenerator,				#isClassSide : true			}		],		LGCompositeEntry [			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #generating,				#sourceCode : 'generate\r\t<script>\r\t^ super generate ',				#isClassSide : true			},			LGShowMethod {				#methodSelectorToShow : #generate,				#classToShow : #FmxNGFortranGenerator,				#isClassSide : true			}		],		LGCompositeEntry [			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #definition,				#sourceCode : 'defineClasses\r\tsuper defineClasses.\r\t"Entities from Fortran\'s meta-model."\r\tmodule := builder newClassNamed: #Module comment: self moduleComment.\r\tprogram := builder newClassNamed: #Program comment: self programComment.\r\tsubProgram := builder newClassNamed: #SubProgram comment: self subProgramComment.\r\tvariable := builder newClassNamed: #Variable comment: self variableComment.\r\tbody := builder newClassNamed: #Body comment: self bodyComment.\r\tfunction := builder newClassNamed: #Function comment: self functionComment.\r\tsubRoutine := builder newClassNamed: #Subroutine comment: self subRoutineComment.\r\tparameter := builder newClassNamed: #Parameter comment: self parameterComment.\r\t\r\t"Links between entities are reified."\r\taccess := builder newClassNamed: #Access comment: self accessComment.\r\tinvocation := builder newClassNamed: #Invocation comment: self invocationComment.\r\tinclude := builder newClassNamed: #Include comment: self includeComment.\r\tusage := builder newClassNamed: #Usage comment: self usageComment.',				#isClassSide : false			},			LGShowMethod {				#methodSelectorToShow : #defineClasses,				#classToShow : #FmxNGFortranGenerator,				#isClassSide : false			}		],		LGCompositeEntry [			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'variableComment\r\t^ \'I model a Fortran variable.\r\rThere are 4 kind of entities in Fortran\'\'s meta-model that can hold variables:\r- Modules\r- Programs\r- Functions\r- Subroutine\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'accessComment\r\t^ \'I model the access to a variable in a Fortran program.\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'bodyComment\r\t^ \'I model the body of an entity in Fortran. I store accesses to variable and invocations made by my container.\r\r3 kinds of entities can have a body:\r- Programs\r- Functions\r- Subroutines\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'functionComment\r\t^ \'I model a function in Fortran.\r\rI have multiple parameters and a body.\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'includeComment\r\t^ \'I model the inclusion of a file in a Fortran file.\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'invocationComment\r\t^ \'I model an (static) invocation in Fortran.\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'parameterComment\r\t^ \'I model a Fortran parameter.\r\rTo kind of entities can hold parameters:\r- Functions\r- Subroutines\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'programComment\r\t^ \'I model a program in Fortran.\r\rI am the entrypoint when Fortran code is executed.\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'subProgramComment\r\t^ \'I model an abstract sub-program in Fortran.\r\rI hold a body and can be invoked.\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'subRoutineComment\r\t^ \'I model a sub-routine in Fortran.\r\rI have multiple parameters and a body.\'',				#isClassSide : false			},			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #comments,				#sourceCode : 'usageComment\r\t^ \'I model the fact that a Fortran module or program uses another Fortran module.\'',				#isClassSide : false			},			LGCompositeEntry [				LGCreateMethod {					#targetClassName : #FmxNGFortranGenerator,					#protocol : #comments,					#sourceCode : 'moduleComment\r\t^ \'I model a Fortran module.\r\rA module is a group of functions and subroutines. It can also declare variables.\'',					#isClassSide : false				},				LGShowMethod {					#methodSelectorToShow : #moduleComment,					#classToShow : #FmxNGFortranGenerator,					#isClassSide : false				}			]		],		LGCompositeEntry [			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #definition,				#sourceCode : 'defineTraits\r\tsuper defineTraits.\r\ttWithBody := builder newTraitNamed: #TWithBody.\r\t\r\t"By default, the basic infrastructure of Famix-NG implements \'dynamic\' invocation.\r\t Here, we implement \'static\' invocation using so it can be extracted for re-use later."\r\ttStaticInvocable := builder newTraitNamed: #TStaticInvocable.\r\ttStaticInvocation := builder newTraitNamed: #TStaticInvocation.\r\ttWithStaticInvocations := builder newTraitNamed: #TWithStaticInvocations.',				#isClassSide : false			},			LGShowMethod {				#methodSelectorToShow : #defineTraits,				#classToShow : #FmxNGFortranGenerator,				#isClassSide : false			}		],		LGCompositeEntry [			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #definition,				#sourceCode : 'defineHierarchy\r\tsuper defineHierarchy.\r\t\r\tfile --|> #TWithFileInclude.\r\t\r\tmodule --|> namedEntity.\r\tmodule --|> #TModule.\r\tmodule --|> #TWithFiles.\r\tmodule --|> #TWithLocalVariables.\r\t\r\tprogram --|> namedEntity.\r\tprogram --|> tWithBody.\r\tprogram --|> #TWithFiles.\r\tprogram --|> #TWithLocalVariables.\r\t\r\tsubProgram --|> namedEntity.\r\tsubProgram --|> tWithBody.\r\tsubProgram --|> tStaticInvocable.\r\tsubProgram --|> #TDefinedInModule.\r\tsubProgram --|> #TWithParameters.\r\tsubProgram --|> #TWithLocalVariables.\r\tsubProgram --|> #TWithFiles.\r\tsubProgram --|> #TWithLocalVariables.\r\t\r\tfunction --|> subProgram.\r\tsubRoutine --|> subProgram.\r\t\r\tbody --|> entity.\r\tbody --|> tWithStaticInvocations.\r\tbody --|> #TWithAccesses.\r\t\r\tparameter --|> namedEntity.\r\tparameter --|> #TParameter.\r\tparameter --|> #TAccessible.\r\t\r\tvariable --|> namedEntity.\r\tvariable --|> #TLocalVariable.\r\tvariable --|> #TAccessible.\r\t\r\t\r\t"Reified links between entities will usually inherit from association."\r\tinclude --|> association.\r\tinclude --|> #TFileInclude.\r\t\r\taccess --|> association.\r\taccess --|> #TAccess.\r\t\r\tinvocation --|> association.\r\tinvocation --|> tStaticInvocation.\r\t\r\tusage --|> association.',				#isClassSide : false			},			LGShowMethod {				#methodSelectorToShow : #defineHierarchy,				#classToShow : #FmxNGFortranGenerator,				#isClassSide : false			}		],		LGCompositeEntry [			LGCreateMethod {				#targetClassName : #FmxNGFortranGenerator,				#protocol : #definition,				#sourceCode : 'defineRelations\r\t"Implement module\'s usage mechanism."\r\t(module property: #incomingUsageRelations)\r\t\t-* (usage property: #target).\r\t\t\r\t(module property: #outgoingUsageRelations)\r\t\t-* (usage property: #source).\r\t\r\t(program property: #outgoingUsageRelations)\r\t\t-* (usage property: #source).\r\t\t\r\t"Implements the fact that an entity with a body has a body."\r\t(tWithBody property: #body)\r\t\t<>- (body property: #container).\r\t\r\t"Implements relations related to static invocation,"\r\t(tStaticInvocable property: #incomingStaticInvocations)\r\t\t-* (tStaticInvocation property: #target).\r\t\t\r\t(tWithStaticInvocations property: #outgoingStaticInvocations)\r\t\t-* (tStaticInvocation property: #caller)',				#isClassSide : false			},			LGShowMethod {				#methodSelectorToShow : #defineRelations,				#classToShow : #FmxNGFortranGenerator,				#isClassSide : false			}		]	]}